name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual runs

jobs:
  # Lint and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          
      - name: Check code formatting with Black
        run: |
          black --check --diff src/ run_interactive.py
          
      - name: Check import sorting with isort
        run: |
          isort --check-only --diff src/ run_interactive.py
          
      - name: Lint with flake8
        run: |
          flake8 src/ run_interactive.py --max-line-length=88 --extend-ignore=E203,W503
          
      - name: Type check with mypy
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional

  # Security and dependency check
  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
          
      - name: Check dependencies for security vulnerabilities
        run: |
          safety check --full-report

  # Build and test
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Verify imports
        run: |
          python -c "from src import main, fetcher, downloader, processor, transcoder, interactive_cli"
          python -c "import yt_dlp; print('yt-dlp version:', yt_dlp.version.__version__)"
          
      - name: Run basic tests
        run: |
          python -c "
          from src.fetcher import get_videos
          from src.processor import sort_videos
          from src.interactive_cli import InteractiveCLI
          print('✅ All modules imported successfully')
          "
          
      - name: Test CLI help
        run: |
          python run_interactive.py --help || true
          python -m src.main --help

  # Integration test
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test URL validation
        run: |
          python -c "
          from src.interactive_cli import InteractiveCLI
          cli = InteractiveCLI()
          
          # Test valid URLs
          assert cli._validate_youtube_url('https://www.youtube.com/@ChannelName')
          assert cli._validate_youtube_url('https://www.youtube.com/@ChannelName/videos')
          assert cli._validate_youtube_url('https://www.youtube.com/watch?v=VIDEO_ID')
          assert cli._validate_youtube_url('https://youtu.be/VIDEO_ID')
          
          # Test invalid URLs
          assert not cli._validate_youtube_url('https://invalid.com')
          assert not cli._validate_youtube_url('not-a-url')
          
          print('✅ URL validation tests passed')
          "
          
      - name: Test video filtering
        run: |
          python -c "
          from src.processor import sort_videos
          
          # Mock video data
          videos = [
              {'title': 'Steam Train Adventure', 'upload_date': '20240101'},
              {'title': 'Electric Train Review', 'upload_date': '20230101'},
              {'title': 'Steam Locomotive History', 'upload_date': '20250101'}
          ]
          
          # Test keyword filter
          filtered = sort_videos(videos, keyword_filter='steam')
          assert len(filtered) == 2, f'Expected 2, got {len(filtered)}'
          
          # Test date filter
          filtered = sort_videos(videos, after_date='20240101')
          assert len(filtered) == 1, f'Expected 1, got {len(filtered)}'
          
          print('✅ Video filtering tests passed')
          "

  # Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check README exists
        run: |
          test -f README.md
          echo "✅ README.md exists"
          
      - name: Check requirements.txt exists
        run: |
          test -f requirements.txt
          echo "✅ requirements.txt exists"
          
      - name: Check documentation folder
        run: |
          test -d documentation/
          echo "✅ documentation/ folder exists"
          
      - name: Validate README content
        run: |
          # Check for key sections
          grep -q "## Features" README.md || echo "⚠️  README missing Features section"
          grep -q "## Quickstart" README.md || echo "⚠️  README missing Quickstart section"
          grep -q "## Installation" README.md || echo "⚠️  README missing Installation section"

  # Release preparation
  release-prep:
    name: Release Preparation
    runs-on: ubuntu-latest
    needs: [lint, security, test, integration, docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create release tag
        run: |
          # Get current version from git
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Current version: $VERSION"
          
          # Create new version
          NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
          echo "New version: $NEW_VERSION"
          
          # Create and push tag
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
          
      - name: Update release notes
        run: |
          echo "## Release ${{ github.ref_name }}" >> RELEASE_NOTES.md
          echo "Date: $(date)" >> RELEASE_NOTES.md
          echo "Commit: ${{ github.sha }}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Changes" >> RELEASE_NOTES.md
          echo "- Automated CI/CD pipeline" >> RELEASE_NOTES.md
          echo "- Code quality improvements" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md 