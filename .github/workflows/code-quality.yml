name: Code Quality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov radon
          
      - name: Run tests with coverage
        run: |
          python -m pytest --cov=src --cov-report=xml --cov-report=html
          
      - name: Generate code complexity report
        run: |
          radon cc src/ -a -nc > complexity_report.txt
          radon mi src/ > maintainability_report.txt
          radon hal src/ > halstead_report.txt
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Comment PR with quality metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read coverage report
            const coverage = fs.readFileSync('./coverage.xml', 'utf8');
            const coverageMatch = coverage.match(/<coverage.*?line-rate="([^"]+)"/);
            const coveragePercent = coverageMatch ? Math.round(parseFloat(coverageMatch[1]) * 100) : 0;
            
            // Read complexity report
            const complexity = fs.readFileSync('./complexity_report.txt', 'utf8');
            const avgComplexity = complexity.match(/Average complexity: ([0-9.]+)/);
            const complexityValue = avgComplexity ? parseFloat(avgComplexity[1]) : 0;
            
            // Create comment
            const comment = `## üìä Code Quality Report
            
            ### Coverage
            - **Line Coverage**: ${coveragePercent}%
            
            ### Complexity
            - **Average Cyclomatic Complexity**: ${complexityValue}
            
            ### Recommendations
            ${coveragePercent < 80 ? '‚ö†Ô∏è  Consider adding more tests to improve coverage' : '‚úÖ Good test coverage!'}
            ${complexityValue > 10 ? '‚ö†Ô∏è  Some functions may be too complex, consider refactoring' : '‚úÖ Code complexity is manageable'}
            
            ---
            *Generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 